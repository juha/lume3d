// Loading an external flex app inside flash and communicating with it// thanks to Jim Armstrong, algorithmist.wordpress.compackage{	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;  	import flash.system.ApplicationDomain;  	import flash.system.LoaderContext;		public class UserinterfaceFlexLoader extends MovieClip	{    	private var __loadedClip:MovieClip;     // loaded content cast as MovieClip	private var __loader:Loader;            // reference to external asset loader    private var __application:*;            // reference to loaded application (<mx:Application>)    public function UserinterfaceFlexLoader()    {		__loadedClip = null;		__loader = new Loader();		var info:LoaderInfo = __loader.contentLoaderInfo;				info.addEventListener(ProgressEvent.PROGRESS, __onProgress);		info.addEventListener(Event.COMPLETE        , __onComplete);		//info.addEventListener(Event.INIT            , __onInit    ); - uncomment if you want init event handling		info.addEventListener(IOErrorEvent.IO_ERROR , __onIOError );				load("colladatest.swf");	}    public function load(_file:String):void	{		var urlRequest:URLRequest = new URLRequest(_file);		var loaderContext:LoaderContext = new LoaderContext();				loaderContext.applicationDomain = ApplicationDomain.currentDomain;		__loader.load(urlRequest, loaderContext);    }	private function __onComplete(_evt:Event):void    { 		addChild(__loader);		__loadedClip = __loader.content as MovieClip;		__loadedClip.addEventListener(Event.ENTER_FRAME, __onFlexAppLoaded);		trace(__loadedClip.width);		trace(root.width);		__loadedClip.x = 0; 		__loadedClip.y = 0;		setChildIndex( __loader, 0 ); // don't block ui elements		// __loadedClip.addEventListener(MouseEvent.CLICK, function(evt) { trace('loaded clip clicked'); } );    }	private function __onProgress(evt:ProgressEvent):void    { 		trace('progress: '+ evt.bytesLoaded / evt.bytesTotal);	}    // poll loaded Flex clip until application property is set (Flex completes its own internal initialization)    private function __onFlexAppLoaded(_evt:Event):void    {      if( __loadedClip.application != null )      {        __loadedClip.removeEventListener(Event.ENTER_FRAME, __onFlexAppLoaded);        __application = __loadedClip.application;	  }	}    private function __cleanup():void    {		var info:LoaderInfo = __loader.contentLoaderInfo;				info.removeEventListener(ProgressEvent.PROGRESS, __onProgress);		// info.removeEventListener(Event.INIT    , __onInit    );		info.removeEventListener(Event.COMPLETE, __onComplete);		info.removeEventListener(IOErrorEvent.IO_ERROR , __onIOError );    }    private function __onIOError(_evt:IOErrorEvent):void    {		trace( "io error - check file names and location" );	}    private function __onInitialize(_e:Event):void    {      	__cleanup();    }		public function moveUp(evt=null): void { __application.moveUp(); }	public function moveDown(evt=null): void { __application.moveDown(); }	public function moveLeft(evt=null): void { __application.moveLeft(); }	public function moveRight(evt=null): void { __application.moveRight(); }	public function zoomIn(evt=null): void { __application.zoomIn(); }	public function zoomOut(evt=null): void { __application.zoomOut(); }	    private function __onClick(_evt:Event):void    {		// __application.__myButton__.enabled = false;		// trace('onclick here in flash');		// __application.myFunction(); 	}  }}